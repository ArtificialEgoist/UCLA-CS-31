<!--?xml version="1.0" encoding="ISO-8859-1" ?-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
 <title>CS 31 Project 3, Fall 2011</title>
</head>
<body>
<div align="right">
Fall 2011 CS 31 
</div>
<div align="center">
<h2>Programming Assignment 3<br>
Scram, Spam!</h2>
<p>
<strong>Time due: 9:00 PM Thursday, October 27</strong>
</p>
</div>
<p style="font-size: smaller">
Before you ask questions about this specification, see if your question has
already been addressed by the <a href="http://cs.ucla.edu/classes/fall11/cs31/Projects/3/faq.html">Project 3 FAQ</a>.  And read
the FAQ before you <!--a href="../../Submit/submission.cgi?asst=3"-->turn in
this project<!--/a-->, to be sure you didn't misinterpret anything.
</p>
<h3>Introduction</h3>
<p>
Luxembourg Online (LOL), a small internet service provider, has been
receiving complaints from customers claiming that they're receiving dozens
of spam email messages clogging their inbox each day.  Consequently, LOL
has contracted with the SmallSoft Corporation to design and build a spam
detection system.  Of course, since SmallSoft gets all of its labor by
exploiting UCLA undergraduate students, you'll be doing all of the
programming.
</p>
<p>
Given one or more email messages, your program will have to classify each
one as either spam or legitimate.  LOL wants you to build a point-based
anti-spam system.  Your program is to look for certain suspicious features
in the email, such as frequent use of exclamation points (!), use of
words like <em>FREE</em>, or excessive use of uppercase letters.  Each
time such a suspicious feature is found, you increase a score that
indicates how suspicious an email is.  If an email's score exceeds 100
points, then it is classified as spam; otherwise, it is deemed legitimate.
The detailed rules for scoring a message are in the <a href="#rules">Spam
Rules</a> section below.
</p>
<h3>Sample Transcript</h3>
<p>
Here is a sample transcript of the program, with <strong>boldface</strong>
text representing the user's input.
</p>
<pre>Enter the subject line of the email: <strong>MAKE MONEY FAST XTFWAQQQ</strong>
Enter the body of the email.  Press Enter on an empty line to finish.
<strong>THIS IS YOUR CHANCE TO MAKE lots of moolah!</strong>
<strong>CLICK ON www.lotsofmoolah.com FOR MORE INFORMATION!</strong>
	<em>← the user just hit the enter key on this line</em>
This email is classified as spam, because its spam score is 115.
Would you like to classify another email (y or n)? <strong>Quit</strong>
Please enter y or n.
Would you like to classify another email (y or n)? <strong>Y</strong>
Please enter y or n.
Would you like to classify another email (y or n)? <strong>y</strong>
Enter the subject line of the email: <strong>hi mom</strong>
Enter the body of the email.  Press Enter on an empty line to finish.
<strong>Hi mom,</strong>
<strong>I hope you're doing OK.  My CS class is great.  The instructor is GREAT!</strong>
<strong>I love you!</strong>
	<em>← the user just hit the enter key on this line</em>
This email is classified as legitimate, because its spam score is 0.
Would you like to classify another email (y or n)? <strong>n</strong>

Number of spam messages: 1
Number of legitimate messages: 1
</pre>
<h3>Input and Output Specification</h3>
<p>
The first line that your program must print out is exactly this (with one
space after the colon):
</p>
<pre>Enter the subject line of the email:
</pre>
<p>
Your program must then read the subject line the user types in.  (It is not
an error if the subject line is the empty string.)  After that, your program
must print out exactly this line:
</p>
<pre>Enter the body of the email.  Press Enter on an empty line to finish.
</pre>
<p>
Your program must then read the message body lines the user types in.
The message body consists of zero or more lines.
After your program reads an empty line, which indicates the end of the
message, it must print out exactly one of these two messages, depending on
whether applying the <a href="#rules">spam rules</a> classified the
message as spam or not:
</p>
<pre>This email is classified as spam, because its spam score is <em>number</em>.
</pre>
<p>
or
</p>
<pre>This email is classified as legitimate, because its spam score is <em>number</em>.
</pre>
<p>
In these messages, <em>number</em> is to be replaced by the appropriate spam
score, such as <code>115</code>, or <code>0</code>, or <code>5</code>.
</p>
<p>
After printing the classification message, your program must print exactly
this (with one space after the question mark):
</p>
<pre>Would you like to classify another email (y or n)?
</pre>
<p>
Your program must then read the line the user types in.  If the user types
only a lowercase <code>y</code>, the program must process another email,
starting with the step where it prints the prompt for the subject line of the
email. 
</p>
If instead, the user types only a lowercase <code>n</code>, the program
must print an empty line, then print the following two lines, then
terminate:
<p></p>
<pre>Number of spam messages: <em>number</em>
Number of legitimate messages: <em>number</em>
</pre>
<p>
In these messages, the first <em>number</em> is the number of messages
that were classified as spam, and the second is the number that were
classified as legitimate.
</p>
<p>
If the user types anything other than a single lowercase <code>y</code> or
<code>n</code> in response to the question, the program must print out exactly
the line:
</p><pre>Please enter y or n.
</pre>
<p>
and repeat the prompt about classifying another email.  It must repeatedly
prompt the user until <code>y</code> or <code>n</code> is selected.
</p>
<h3><a id="rules"></a>Spam Rules</h3>
<p>
The LOL spam experts have come up with five rules, each of which can
contribute some points to the spam score of a message.  If the total spam
score for the message is more than 100, the message is classified as spam;
otherwise, it is considered a legitimate message.  You must use only these
five rules; do not improvise and make up your own.  (Save that for when
you start your own competing spam filter company.)
</p>
<p>
First, some definitions:  a <em>word</em> in a string is a contiguous sequence
of letters delimited by non-letters or the start or the end of the string.  A
letter may be upper- or lowercase.  As an example, the string <code>It's
like the old-fashioned 1980s!</code> has these seven words:  <code>It  s 
like  the  old  fashioned  s</code>.  A <em>consonant</em> is a letter
other than one of these ten: <code>aeiouAEIOU</code>.
</p>
<p>
Here are the five rules.  The first three relate to the subject line of the
email, while the last two are concerned with the body of the message.
</p>
<ol>
<li>
<p>
If the subject line has at least one word, and <em>more than</em> 90% of the
words in the subject line consist of only uppercase letters, then add 30 points
to the spam score.  For example, a subject line of
</p>
<pre>GET A DIPLOMA FREE!!
</pre>
<p>
meets this criterion.
</p>
</li>
<li>
<p>
If the <em>last word</em> of the subject line contains <em>more than</em> 3
consecutive consonants, then add 40 points to the spam score.  Spammers often
place random words at the end of a subject line to confuse some anti-spam
software; this rules detects many of those random words.  For example, this
subject line earns the 40 point addition to the score:
</p>
<pre>This stock is going up, up, up!  mqafrpxo!
</pre>
</li>
<li>
<p>
If the subject line contains 3 or more contiguous exclamation points, then add
20 points to the spam score.  This subject line qualifies for the 20 points,
for example:
</p>
<pre>Make money fast!!!  No experience necessary!!!!!
</pre>
</li>
<li>
<p>
If the <em>body</em> of the message has at least one word, and <em>more
than</em> 50% of the words making up the body of the email consist
entirely of uppercase letters, then add 40 points to the score.  For
example, this email:
</p>
<pre><em>Subject:</em>  Greetings from your good friend
<em>Body:</em>
	THIS IS YOUR CHANCE TO MAKE lots of moolah!
	GO TO www.lotsofmoolah.com FOR MORE INFORMATION!
</pre>
<p>
earns the 40 points because there are 17 words in the body of the email,
11 of which (64.7%) are entirely uppercase.  
</p>
</li>
<li>
<p>
<em>Each time</em> one of the following special words is found in the
<em>body</em> of the email, add 5 points to the spam score for that message.
The letters in these words may be in either case (e.g., <code>SeX</code> is
the same as <code>sex</code>):
</p>
<pre>buy
cheap
click
diploma
enlarge
free
limited
money
now
offer
only
pills
sex
</pre>
<p>
For example, this message would score 35 points, 5 for each of the words
indicated in boldface:
</p>
<pre><em>Subject:</em>  Looking for cheap tickets?
<em>Body:</em>
	You can find <strong>cheap</strong>! tickets <strong>ONLY</strong> on our website.  This is a <strong>limited</strong> time
	<strong>OfFeR</strong>!!  Don't be a cheapskate.  <strong>Click</strong> <strong>now</strong> for this <strong>offer</strong>!
</pre>
<p>
Notice that the "cheap" in the subject line is ignored by this rule, as is the
word "cheapskate" in the second line of the body.
</p>
</li>
</ol>
<h3>Functions You Must Write</h3>
<p>
We know that this will be the most complex program that many of you will have
written in your programming careers to date, so we will make it easier for
you by decomposing the problem for you.
</p>
<p>
To get full credit for this project, you <strong>must</strong> implement all of
the following functions, using the exact function names, parameters types,
and return types shown in this specification.  The functions must not use
any global variables whose values may change.  (Global <em>constants</em> are
all right.)  In addition to testing your program as a whole, we will also
test each of the following functions separately.  That way, if your
program doesn't work overall but you correctly implemented some of the
functions, you'll still get some credit.
</p>
<p>
Your solution should use these functions where appropriate (although you
might not use every one of them).  One reason is to help you get partial
credit in the case where most of your program is correct, but a few of the
function implementations are incorrect.
</p>
<p>
Your solution may use functions in addition to those listed here.  While we
won't test those additional functions separately, their use may help you
structure your program more readably.
</p>
<p>
The functions you must implement are
</p>
<pre>	getFirstWord
	getLastWord
	extractWord
	isUppercase
	makeUppercase
	hasMultipleExclamations
	isGibberishWord
</pre>
<p>
When you turn in your solution, none of these seven required functions, nor
any functions that they call, may read any input from <code>cin</code> or
write any output to <code>cout</code>.  (Of course, during development,
you may have them write whatever you like to help you debug.)  If you want
to print things out for debugging purposes, write to <code>cerr</code>
instead of <code>cout</code>.  <code>cerr</code> is the standard error
destination; items written to it by default go to the screen.  When we
test your program, we will cause everything written to <code>cerr</code>
to be discarded instead — we will never see that output, so you may leave
those debugging output statements in your program if you wish.
</p>
<h4>string getFirstWord(string text)</h4>
<p>
This function returns the first word in the string variable <code>text</code>.
If <code>text</code> has no words, this function returns the empty string
(i.e. "").  Here is an incomplete test driver for this function:
</p>
<pre>	void test()
	{
	      // This writes "Hello"
	    cerr &lt;&lt; getFirstWord("!!Hello, Fred") &lt;&lt; endl;

	      // This writes "greetings 9"
	    string msg = "greetings, mom, how are you?";
	    string result = getFirstWord(msg);
	    cerr &lt;&lt; result &lt;&lt; " " &lt;&lt; result.size() &lt;&lt; endl;

	      // This writes "0"
	    string s = getFirstWord(" $@#%!!");
	    cerr &lt;&lt; s.size() &lt;&lt; endl;
	}
</pre>
<p>
Hint:  The string <a href="http://cs.ucla.edu/classes/fall11/cs31/morestrings.html"><code>substr</code></a>
function may be of use in the implementation of this function.
</p>
<h4>string getLastWord(string text)</h4>
<p>
This function returns the last word in the string variable <code>text</code>.
If <code>text</code> has no words, this function returns the empty string
(i.e. "").  As an example, <code>getLastWord("MAKE MONEY FAST!!")</code>
returns <code>"FAST"</code>.
</p>
<p>
Hint:  The string <a href="http://cs.ucla.edu/classes/fall11/cs31/morestrings.html"><code>substr</code></a>
function may be of use in the implementation of this function.
</p>
<h4>string extractWord(string&amp; text)</h4>
<p>
This function returns the first word in the string that <code>text</code> is
a reference to.  If that string has no words, this function returns the empty
string.
</p>
<p>
This function also modifies the string that <code>text</code> refers to.  If
that string has no words, then <code>text</code> is set to the empty string.
Otherwise, the first word of <code>text</code> and all non-letters preceding
the first word are removed from <code>text</code>.  Here is an incomplete
test driver:
</p>
<pre>	void test()
	{
	    string s = "***AMAZING!*** Do it, now!!";
	    string w = extractWord(s);
	      // This writes "AMAZING" and "!*** Do it, now!!"
	    cerr &lt;&lt; w &lt;&lt; endl &lt;&lt; s &lt;&lt; endl;

	    w = extractWord(s);
	      // This writes "Do" and " it, now!!" (space before "it")
	    cerr &lt;&lt; w &lt;&lt; endl &lt;&lt; s &lt;&lt; endl;

	    w = extractWord(s);
	      // This writes "it" and ", now!!"
	    cerr &lt;&lt; w &lt;&lt; endl &lt;&lt; s &lt;&lt; endl;

	    w = extractWord(s);
	      // This writes "now" and "!!"
	    cerr &lt;&lt; w &lt;&lt; endl &lt;&lt; s &lt;&lt; endl;

	    w = extractWord(s);
	      // This writes "" and "" (both empty strings)
	    cerr &lt;&lt; w &lt;&lt; endl &lt;&lt; s &lt;&lt; endl;
	}
</pre>
<p>
Hint:  The string <a href="http://cs.ucla.edu/classes/fall11/cs31/morestrings.html"><code>substr</code></a>
function may be of use in the implementation of this function.
</p>
<h4>bool isUppercase(string text)</h4>
<p>
This function returns true if and only if every letter in the string
<code>text</code> is uppercase.  (For a string with no letters, this means
the function returns true.)  Non-letter characters in the string
<code>text</code>, if any, have no effect on the result of this function.
</p>
<h4>string makeUppercase(string text)</h4>
<p>
This function returns a new string identical to the value of the string
<code>text</code>, except that each lowercase letter of <code>text</code>
appears as its uppercase equivalent in the result string.  For example,
<code>makeUppercase("Earn *big* MONEY at home!!")</code> returns
<code>"EARN *BIG* MONEY AT HOME!!"</code>.
</p>
<h4>bool hasMultipleExclamations(string text)</h4>
<p>
This function returns true if and only if the string <code>text</code>
contains three consecutive exclamation marks.  For example, it returns
true for the strings <code>"Wow!!!"</code> and
<code>"Congrats!!!! Good luck"</code>, and false for the strings
<code>"W!I!N!"</code> and <code>"!! !"</code>.
</p>
<h4>bool isGibberishWord(string text)</h4>
<p>
This function returns true if and only if the string <code>text</code>
contains <em>more than</em> three consecutive consonants.  For example,
it returns true for the strings <code>"AGPQrxab"</code> and
<code>"xxxxozzzz"</code>, and false for the strings <code>"mortgage"</code>
and <code>"discount prescriptions"</code>.
</p>
<h3>Programming Guidelines</h3>
<p>
The correctness of your program must not depend on undefined program behavior.
Your program must never access out of range positions in a string.
</p><p>
You must use your best programming style, including commenting where
appropriate.  Be sure that your program builds successfully, and try to
ensure that your functions do something reasonable for at least a few
test cases.  That way, you can get some partial credit for a solution that
does not meet the entire specification.  To test your program effectively,
you should <em>unit test</em> each of your functions individually, and
<em>system test</em> your entire program to ensure that all of the functions
work together as expected.
</p>
<p>
One way to organize your program so that you can easily switch between testing
individual functions and running the whole program normally is to do something
like this:
</p>
<pre>	const bool unitTesting = true;

	int main()
	{
	    if (unitTesting)
	    {
	        doUnitsTests();
		return 0;
	    }
	    …  // code for the normal behavior goes here
	}
</pre>
<p>
The <code>doUnitTests</code> function does all your unit tests.  To test the
whole program normally, just change the value of the <code>unitTesting</code>
variable from <code>true</code> to <code>false</code> (and make sure it's
<code>false</code> when you turn in the program).
</p>
<p>
There are a number of ways you might write <code>doUnitTests</code>.  One
way is to interactively accept test strings:
</p>
<pre>	void doUnitTests()
	{
	    string s;
	    for (;;)
	    {
	        cerr &lt;&lt; "Enter text: ";
		getline(cin, s);
		if (s == "quit")
			break;
		cerr &lt;&lt; "isUppercase returns ";
		cerr &lt;&lt; (isUppercase(s) ? "true" : "false") &lt;&lt; endl;
		cerr &lt;&lt; "getFirstWord returns ";
		cerr &lt;&lt; getFirstWord(s) &lt;&lt; endl;
	    }
	}
</pre>
<p>
While this is flexible, you run the risk of not being able to reproduce
all your test cases if you make a change to your code and want to test
that you didn't break anything that used to work.
</p>
<p>
Another way is to hard-code various tests and report which ones the program
passes:
</p>
<pre>	void doUnitTests()
	{
	    if (getFirstWord("hello there") == "hello")
		cerr &lt;&lt; "Passed test 1: getFirstWord(\"hello there\") == \"hello\")" &lt;&lt; endl;
	    if (!isUppercase("WoW"))
		cerr &lt;&lt; "Passed test 2: !isUppercase(\"WoW\")" &lt;&lt; endl;
	    …
	}
</pre>
<p>
This can get rather tedious.  Fortunately, the library has a facility to make
this easier: <code>assert</code>.  You can call <code>assert</code> in the
following manner:
</p>
<pre>	assert(<em>some boolean expression</em>);
</pre>
<p>
During execution, if the expression is true, nothing happens and execution
continues normally; if it is false, a diagnostic message is written
telling you the text and location of the failed assertion, and the program
is terminated.  As an example, here's a very incomplete set of tests:
</p>
<pre>	#include <cassert>

	…

	void doUnitTests()
	{
	    assert(getFirstWord("hello there") == "hello");
	    assert( isUppercase("WOW!!") );
	    assert( !isUppercase("WoW!!") );
            string s = "***hello there";
            assert( extractWord(s) == "hello"  &amp;&amp;  s == " there" );
            assert( extractWord(s) == "there"  &amp;&amp;  s == "" );
            assert( extractWord(s) == ""  &amp;&amp;  s == "" );
	    …
	    cerr &lt;&lt; "All tests succeeded" &lt;&lt; endl;
	}
</cassert></pre>
<p>
The reason for writing one line of output at the end is to ensure that you
can distinguish the situation of all tests succeeding from the case where one
function you're testing silently crashes the program.
</p>
<h3>What to turn in</h3>
<p>
What you will turn in for this assignment is a zip file containing these
two files and nothing more:
</p>
<ol>
<li>
<p>
A text file named <strong>spam.cpp</strong> that contains the source
code for your C++ program.  Your source code should have helpful comments
that tell the purpose of the major program segments and explain any tricky
code.
</p><p>
Make sure that your program compiles and links successfully, and try to
ensure that it does something reasonable for at least a few test cases.
That way, you can get some partial credit for a program that does not meet
the entire specification. 
</p>
</li>
<li>
A file named <strong>report.doc</strong> or <strong>report.docx</strong>
(in Microsoft Word format) or <strong>report.txt</strong> (an ordinary
text file) that contains:
<ol style="list-style: lower-alpha">
<li>
A brief description of notable obstacles you overcame.
</li>
<li>
A description of the design of your program.  You should use
<a href="http://cs.ucla.edu/classes/fall11/cs31/pseudocode.html">pseudocode</a> in this description where it
clarifies the presentation.
</li><li>
A list of the test data that could be used to thoroughly test your
program, along with the reason for each test.  You don't have to include
the results of the tests, but you must note which test cases your program
does not handle correctly.  (This could happen if you didn't have time to
write a complete solution, or if you ran out of time while still debugging
a supposedly complete solution.)  Notice that most of this portion of your
report can be written just after reading the requirements in this
specification, before you even start designing your program.
</li>
</ol>
</li>
</ol>
<p>
By October 26, there will be a link on the class webpage that will enable you
<!--
The <a href="../../Submit/submission.cgi?asst=3">turn in Project 3</a>
link on the class webpage enables you
-->
to turn in your zip file electronically.  Turn in the file by the due time
above.  Give yourself enough time to be sure you can turn something in,
because we will not accept excuses like "My network connection at home was
down, and I didn't have a way to copy my files and bring them to a SEASnet
machine."  There's a lot to be said for turning in a preliminary version
of your program and report early (You can always overwrite it with a later
submission).  That way you have something submitted in case there's a
problem later.
</p>


</body></html>